/* 
* Copyright (C) 2000-2008 Institute for Global Environment and Society /
*                        Center for Ocean-Land-Atmosphere Studies
* Author: Joe Wielgosz <joew@cola.iges.org>
* 
* This file is part of the Anagram Server Framework.
* 
* The Anagram Server Framework is free software; you can redistribute
* it and/or modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either version
* 2, or (at your option) any later version.
* 
* The Anagram Server Framework is distributed in the hope that it will
* be useful, but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
* See the GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with the Anagram Server Framework; see the file COPYRIGHT.  If
* not, write to the Free Software Foundation, Inc., 59 Temple Place -
* Suite 330, Boston, MA 02111-1307, USA.
* 
* You can contact IGES/COLA at 4041 Powder Mill Rd Ste 302, Calverton MD 20705.
* 
* Last modified: $Date: 2008/07/22 17:22:27 $ 
* Revision for this file: $Revision: 1.4 $
* Release name: $Name: v2_0 $
* Original for this file: $Source: /homes/cvsroot/gds/gds/src/org/iges/anagram/service/ErrorService.java,v $
*/
package org.iges.anagram.service;

import java.io.*;

import org.iges.anagram.ClientRequest;
import org.iges.anagram.AbstractModule;
import org.iges.anagram.ModuleException;

/** A special type of service called when normal request processing
 *  produces an error. 
 */
public abstract class ErrorService
    extends Service {

    /** Not used by an error service */
    public void handle(ClientRequest request) {
	throw new RuntimeException("not implemented");
    }

    /** Handles "known" errors, i.e. those which are intentionally
     *  generated by other Anagram modules.
     *  Calls the subclass's implementation of sendErrorMsg() 
     *  to send an error message to the client, and logs the error */
    public void handle(ClientRequest request, ModuleException me) {
	String msg = me.getMessage();
	log.error(me.getModule(), request + " " + msg);
	if (me.getClientMessage() != null) {
	    msg = me.getClientMessage();
	    //	    log.error(this, "response to client: " + msg);
	}
	sendErrorMsg(request, msg);
    }

    /** Handles "unexpected" errors, i.e. those which result from 
     *  runtime problems and coding errors.
     *  Calls the subclass's implementation of sendUnexpectedErrorMsg() 
     *  to send an error message to the client, and logs the error */
    public void handleUnexpected(ClientRequest request, Throwable t) {
	if (t instanceof OutOfMemoryError) {
	    log.error(this, request + " ran out of available memory.\n" +
		      "your server is not configured properly to handle " + 
		      " peak loads. please see documentation.\n");
	    sendErrorMsg(request, "server is low on resources. " +
			 "please try again later.\n");
	} else {
	    StringWriter debugInfo = new StringWriter();
	    PrintWriter p = new PrintWriter(debugInfo);
	    t.printStackTrace(p);

	    log.error(this, request + 
		      "oops, exception " + t.getClass() + 
		      " was not caught.\n" +
		      "please report this as a bug, along with " +
		      "the following debug info:\n" +
		      debugInfo.toString() );

	    sendUnexpectedErrorMsg(request, debugInfo.toString());
	}
    }

    /** Sends the message provided in a format defined by the 
     *  ErrorService implementation. Called by <code>handle()</code>. 
     */
    protected abstract void sendErrorMsg(ClientRequest request, 
					 String msg);

    /** Sends the "unexpected error" message provided in a format 
     *  defined by the ErrorService implementation. 
     *  Called by <code>handle()</code>. 
     */
    protected abstract void sendUnexpectedErrorMsg(ClientRequest request, 
						   String debugInfo);
    
}
